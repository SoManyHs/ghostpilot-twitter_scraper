# You can use any of these parameters to create conditions or mappings in your template.
Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Resources:
  # Create your resource here, such as an AWS::DynamoDB::Table:
  #CheckpointParameter:
  #  Type: AWS::SSM::Parameter
  #  Properties:
  #    Description: Twitter last id for checkpoint when looking for latest tweets
  #    Name: { "Fn::Sub": "/${Env}/twitter_checkpoint" }
  #    Value: None
  #    Type: String

  # 1. In addition to your resource, if you need to access the resource from your ECS task 
  # then you need to create an AWS::IAM::ManagedPolicy that holds the permissions for your resource.
  #
  # For example, below is a sample policy for MyTable:
  CheckpointParameterPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SSMActions
            Effect: Allow
            Action:
              - ssm:*
            Resource: *
            #Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/twitter_checkpoint"
            
Outputs:
  # 2. If you want to inject a property of your resource as an environment variable to your ECS task,
  # then you need to define an output for it.
  #
  # For example, the output MyTableName will be injected in capital snake case, MY_TABLE_NAME, to your task.
  #CheckpointParameterName:
  #  Description: "Checkpoint Parameter Name"
  #  Value: !Ref CheckpointParameter

  # 1. You also need to output the IAM ManagedPolicy so that Copilot can inject it to your ECS task role.
  CheckpointParameterPolicyArn:
    Description: "The ARN of the ManagedPolicy to attach to the task role."
    Value: !Ref CheckpointParameterPolicy